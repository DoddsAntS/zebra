<?php
namespace cms\Entity\Page;

use Doctrine\ORM\Mapping as ORM;
use cms\Entity\Entity;
/**
 * Page content
 * @ORM\Entity
 * @ORM\HasLifecycleCallbacks
 * @ORM\Table(name="page_content")
 * @package Page
 * @author adodds
 */
class Content extends Entity {
    
    /**
     *
     * @var integer $id autogenerated id
     * @ORM\Column(name="id", type="integer",nullable=false)
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="IDENTITY")
     */
    protected $id;
    
    /**
     * @var object user
     * @ORM\ManyToOne(targetEntity="\cms\Entity\User",cascade={"persist","remove"})
     */
    protected $user;
    
    /**
     * @var object page
     * @ORM\ManyToOne(targetEntity="\cms\Entity\Page",inversedBy="content",cascade={"persist","remove"})
     */
    protected $page;
    
    /**
     * @var text Page content
     * @ORM\Column(type="text",nullable=false)
     */
    protected $text;
    
    /**
     *
     * @var integer Revision number
     * @ORM\Column(type="integer",nullable=false)
     * @ORM\version
     */
    protected $revision;
    
    /**
     *
     * @var boolean
     * @ORM\Column(type="boolean",nullable=false)
     */
    protected $active;
    
    /**
     *
     * @var datetime
     * @ORM\Column(type="datetime",nullable=false)
     */
    protected $addDate;
    
    protected $requiredFields = array(
                                    'page',
                                    'text',
                                    'active'
                                );
    
    protected $listFields = array();
    
    public function __get($what = '') {
        return $this->{$what};
    }
    
    public function __set($what, $value) {
        $this->{$what} = $value;
    }
    
    /**
     * @ORM\PrePersist 
     */
    public function prePersist() {
        if(!($this->addDate instanceof \DateTime)) {
            $this->addDate = new \DateTime();
        }
        $this->revision = $this->getRevision('next');
    }
    
    public function getRevision($page, $type = 'current') {
        $item = $this->entityManager->createQuery("select MAX(l.revision) FROM ". get_class($this) ." l WHERE l.page='{$page}'")->execute();
        if(count($item) == 0) {
            return $type == 'current' ? NULL : 1;
        }
        else {
            return $type == 'current' ? $item[0] : ($item[0]+1);
        }
    }
}